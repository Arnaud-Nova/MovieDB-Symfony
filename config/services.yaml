# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    poster_directory: '%kernel.project_dir%/public/uploads/posters'
    slugger_to_lower: true
# Pour rendre l'acces a une valeur de configuration fixe , je vais plutot utiliser l'ajout de constantes
# dans la section "parameters" de ma configuration
# Note : chaque fichier de configuration meme hors services.yml peuvent beneficier d'une section parameters
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests,Kernel.php}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    #App\Utils\Slugger:
        #arguments:
            #$toLower: '%slugger_to_lower%' # appel d'une constante %maconstantedansparameters%
            #$logger: '@monolog.logger' # lorque j'injecte un service je peux recuperer son alias via debug:autowiring et je dois le prefixer d'un @ pour specifier que c'est un service que j'invoque

    nova_slugger: # je definit mon alias pour mon service
        class: App\Utils\Slugger
        arguments:
            $toLower: '%slugger_to_lower%'
    
    # j'indique que mon service sera appel√© dorenavant par son alias et non son namespace lorsque que je l'injecte directement dans un autre service a partir de services.yml
    App\Utils\Slugger: '@nova_slugger'
    
    nova_fileuploader:
        class: App\Utils\FileUploader
        arguments:
            $pathFile: '%poster_directory%'

    App\Utils\FileUploader : '@nova_fileuploader'
    